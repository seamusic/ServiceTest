---
globs: *.cs,*.proto
---

# gRPC 开发规范

## 项目架构
项目支持两种 gRPC 实现方式：

### HTTP + gRPC (GrpcServiceTest)
- 基于 ASP.NET Core + Grpc.AspNetCore
- 端口: 7237 (HTTPS)
- 支持中间件、依赖注入、HTTP 网关
- 适合 Web API 和需要 HTTP 网关的场景

### 纯 gRPC (GrpcPureService)
- 基于 Grpc.Core
- 端口: 50051
- 高性能、无 HTTP 开销
- 适合微服务间高性能通信

## Protocol Buffers 文件
- 所有 `.proto` 文件统一放在 `GrpcShared/Protos/` 目录下
- 使用 `syntax = "proto3"` 语法
- 设置正确的 `csharp_namespace` 选项
- 服务定义应清晰描述 RPC 方法
- 支持复杂的消息类型和枚举

## gRPC 服务实现
- 服务类应继承自生成的基类（如 `Greeter.GreeterBase`）
- 使用构造函数注入获取依赖（如 `ILogger<T>`）
- 所有 RPC 方法应返回 `Task<T>` 或 `Task`
- 使用 `ServerCallContext` 参数访问请求上下文
- 实现完整的错误处理和验证

## 项目配置
- 在 `.csproj` 文件中正确配置 Protobuf 引用
- 使用 `GrpcServices="Server"` 为服务器生成代码
- 确保引用了正确的 gRPC 包版本
- 配置正确的端口和协议设置

## 共享库使用
- 使用 `GrpcShared` 项目统一管理 Protocol Buffers 定义
- 所有服务项目引用共享库
- 确保版本一致性

## 日志记录
- 使用结构化日志记录，包含相关参数
- 记录请求接收和响应发送的关键信息
- 记录性能指标和错误信息